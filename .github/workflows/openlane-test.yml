# name: Install OpenRAM and Tools

# on:
#   push:
#     branches:
#       - main
#   pull_request:

# jobs:
#   setup-env:
#     runs-on: ubuntu-22.04

#     steps:
#       # Step 1: Check out the repository
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # Step 2: Clone OpenRAM and setup
#       - name: Clone and setup OpenRAM
#         run: |
#           git clone https://github.com/VLSIDA/OpenRAM.git
#           cd OpenRAM
#           ./install_conda.sh
#           ls > directory_listing.txt
#           echo "Directory listing saved to directory_listing.txt"
#           cat directory_listing.txt

#       # Step 3: Define environment variables and persist them
#       - name: Set environment variables
#         run: |
#           echo "OPENRAM_HOME=$HOME/OpenRAM/compiler" >> $GITHUB_ENV
#           echo "OPENRAM_TECH=$HOME/OpenRAM/technology" >> $GITHUB_ENV
#           echo "PYTHONPATH=$OPENRAM_HOME" >> $GITHUB_ENV

#       # Step 4: Display environment variables
#       - name: Display environment variables
#         run: |
#           echo "OPENRAM_HOME: $OPENRAM_HOME"
#           echo "OPENRAM_TECH: $OPENRAM_TECH"
#           echo "PYTHONPATH: $PYTHONPATH"
#                 # Step 3: Check if the design folder exists and read a file from it
#       # - name: Check and read file from design folder
#       #   run: |
#       #     if [ -d "designs" ]; then
#       #       cd designs
#       #       if [ -f "myconfig" ]; then  # Replace 'your_file.txt' with the actual file name
#       #         echo "File exists. Reading contents..."
#       #         cat myconfig  # Display the file contents
#       #       else
#       #         echo "File does not exist in the design folder."
#       #       fi
#       #     else
#       #       echo "Design folder does not exist."
#       #     fi
#       - name: List files in OpenRAM directory
#         run: |
#           ls -R   # This will list all files recursively in the OpenRAM directory
#       # Step 4: Run the sram_compiler.py script with the configuration from the design folder
#       - name: Run sram_compiler.py with myconfig from design folder
#         run: |
#           source ~/.bashrc  # Ensure environment variables are sourced
#           echo "Running sram_compiler.py with myconfig from design folder"
#           python3 sram_compiler.py design/myconfig  # Adjust the path to your file in the design folder

name: OpenLane Dockerized Setup

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  setup:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get upgrade -y
        sudo apt install -y build-essential python3 python3-venv python3-pip python3-tk curl make git

    - name: Install Docker
      run: |
        sudo apt-get remove -y docker docker-engine docker.io containerd runc
        sudo apt-get update
        sudo apt-get install -y \
          ca-certificates \
          curl \
          gnupg \
          lsb-release
        sudo mkdir -p /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install verilator
        sudo apt-get install yosys
        sudo apt-get install netgen
        sudo apt-get install klayout
        sudo apt-get install magic
        sudo apt install -y build-essential python3 python3-venv python3-pip python3-tk curl make git
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

    - name: Ensure Docker Group Exists (Skip if exists)
      run: |
        if ! grep -q '^docker:' /etc/group; then
          sudo groupadd docker
        fi

    - name: Add User to Docker Group (No Reboot)
      run: |
        sudo usermod -aG docker $USER

    - name: Verify Docker Installation
      run: |
        docker --version
        python3 --version
        python3 -m pip --version

    - name: Install OpenLane via pip
      run: |
        git clone --depth 1 https://github.com/The-OpenROAD-Project/OpenLane.git
        cd OpenLane/
        make
        make test

    - name: Run OpenLane Smoke Test
      run: |
        python3 -m openlane designs/inverter_OL/config.json

